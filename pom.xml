<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.byneuron</groupId>
	<artifactId>objectstorage</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>ObjectStorage</name>
	<description>Object Storage</description>
	<parent>
		<groupId>io.micronaut</groupId>
		<artifactId>micronaut-parent</artifactId>
		<version>3.8.8</version>
	</parent>

	<properties>
		<jdk.version>17</jdk.version>
		<release.version>17</release.version>
		<micronaut.version>3.8.8</micronaut.version>
		<exec.mainClass>com.byneuron.AzureApplication</exec.mainClass>
		<micronaut.runtime>netty</micronaut.runtime>
		<awaitility.version>4.2.0</awaitility.version>
		<micronaut.azure.function>4.0.0</micronaut.azure.function>
		
		<paho.version>1.2.6.beta1</paho.version>
		<mustache.java.version>0.9.10</mustache.java.version>
		
		<jmh.version>1.35</jmh.version>
		<jacoco-maven-plugin.version>0.8.8</jacoco-maven-plugin.version>
		<jacoco.reportFolder>${project.build.directory}/jacoco</jacoco.reportFolder>
		<jacoco.utReportFile>${jacoco.reportFolder}/test.exec</jacoco.utReportFile>
		<jacoco.itReportFile>${jacoco.reportFolder}/integrationTest.exec</jacoco.itReportFile>

		<jacoco.instruction.ratio>0.18</jacoco.instruction.ratio>
		<jacoco.method.ratio>0.14</jacoco.method.ratio>
		<jacoco.branch.ratio>0.10</jacoco.branch.ratio>
		<jacoco.line.ratio>0.14</jacoco.line.ratio>
		<jacoco.max.missed.classes>31</jacoco.max.missed.classes>
	</properties>

	<dependencies>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>1.2.11</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jdk8</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-guava</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-context</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-core</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-http</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-http-server-netty</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-inject</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut.kubernetes</groupId>
			<artifactId>micronaut-kubernetes-discovery-client</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut.security</groupId>
			<artifactId>micronaut-security</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut.security</groupId>
			<artifactId>micronaut-security-oauth2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut.security</groupId>
			<artifactId>micronaut-security-jwt</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut.test</groupId>
			<artifactId>micronaut-test-junit5</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut.test</groupId>
			<artifactId>micronaut-test-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>jakarta.inject</groupId>
			<artifactId>jakarta.inject-api</artifactId>
			<version>2.0.1</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>7.2</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apiguardian</groupId>
			<artifactId>apiguardian-api</artifactId>
			<version>1.1.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>${awaitility.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
			<version>3.1.8</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-commons</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>rabbitmq</artifactId>
			<scope>test</scope>
		</dependency>	
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>com.azure</groupId>
		    <artifactId>azure-core</artifactId>
		    <scope>compile</scope>
		</dependency>
		<dependency>
		    <groupId>com.azure</groupId>
		    <artifactId>azure-storage-blob</artifactId>
		    <scope>compile</scope>
		</dependency>
		<dependency>
		    <groupId>io.micronaut.objectstorage</groupId>
		    <artifactId>micronaut-object-storage-core</artifactId>
		     <scope>compile</scope>
		    <version>1.1.0</version>
		</dependency>
		<dependency>
		    <groupId>io.micronaut.objectstorage</groupId>
		    <artifactId>micronaut-object-storage-azure</artifactId>
		     <scope>compile</scope>
		    <version>1.1.0</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>io.micronaut.build</groupId>
				<artifactId>micronaut-maven-plugin</artifactId>
				<?m2e ignore?>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<!-- lombok must be before inject-java -->
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>io.micronaut</groupId>
							<artifactId>micronaut-inject-java</artifactId>
							<version>${micronaut.version}</version>
						</path>
					</annotationProcessorPaths>
					<compilerArgs>
						<arg>-parameters</arg>
						<arg>-Amicronaut.processing.group=com.byneuron</arg>
						<arg>-Amicronaut.processing.module=micronaut-gitlab</arg>
					</compilerArgs>
					<fork>true</fork>
					<forceJavacCompilerUse>true</forceJavacCompilerUse>
				</configuration>
				<executions>
					<execution>
						<id>test-compile</id>
						<goals>
							<goal>testCompile</goal>
						</goals>
						<configuration>
							<compilerArgs>
								<arg>-parameters</arg>
								<arg>-Amicronaut.processing.group=com.byneuron</arg>
								<arg>-Amicronaut.processing.module=micronaut-gitlab</arg>
							</compilerArgs>
							<annotationProcessorPaths>
								<path>
									<groupId>org.projectlombok</groupId>
									<artifactId>lombok</artifactId>
									<version>${lombok.version}</version>
								</path>
								<path>
									<groupId>io.micronaut</groupId>
									<artifactId>micronaut-inject-java</artifactId>
									<version>${micronaut.version}</version>
								</path>
								<path>
									<groupId>org.openjdk.jmh</groupId>
									<artifactId>jmh-generator-annprocess</artifactId>
									<version>${jmh.version}</version>
								</path>
							</annotationProcessorPaths>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>analyze dependencies</id>
						<?m2e ignore?>
						<goals>
							<goal>analyze-only</goal>
							<goal>analyze-duplicate</goal>
						</goals>
						<configuration>
							<failOnWarning>true</failOnWarning>
							<ignoreNonCompile>true</ignoreNonCompile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<id>default-shade</id>
						<phase>package</phase>
						<configuration>
							<finalName>app</finalName>
						</configuration>
					</execution>
					<execution>
						<id>package benchmarks-shade</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<finalName>benchmarks</finalName>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.openjdk.jmh.Main</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>run-benchmarks</id>
						<phase />
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<classpathScope>test</classpathScope>
							<executable>java</executable>
							<arguments>
								<argument>-classpath</argument>
								<classpath />
								<argument>org.openjdk.jmh.Main</argument>
								<argument>.*</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>2.0.0</version>
				<executions>
					<execution>
						<id>license analysis</id>
						<goals>
							<goal>add-third-party</goal>
						</goals>
						<phase>verify</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.1.0</version>
				<executions>
					<execution>
						<id>write properties to .env</id>
						<goals>
							<goal>write-project-properties</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<outputFile>${project.basedir}/.env</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.13.0</version>
				<executions>
					<execution>
						<id>show dependency updates</id>
						<phase />
						<goals>
							<goal>display-dependency-updates</goal>
						</goals>
						<configuration>
							<processDependencyManagement>true</processDependencyManagement>
							<processPluginDependencies>true</processPluginDependencies>
							<processPluginDependenciesInPluginManagement>true</processPluginDependenciesInPluginManagement>
							<rulesUri>file://${maven.multiModuleProjectDirectory}/.mvn/versions-maven-plugin/rules.xml</rulesUri>
						</configuration>
					</execution>
					<execution>
						<id>show plugin updates</id>
						<phase />
						<goals>
							<goal>display-plugin-updates</goal>
						</goals>
						<configuration>
							<rulesUri>file://${maven.multiModuleProjectDirectory}/.mvn/versions-maven-plugin/rules.xml</rulesUri>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>pre-unit-tests</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.utReportFile}</destFile>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${jacoco.utReportFile}</dataFile>
							<outputDirectory>${jacoco.reportFolder}</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>jacoco-check-unit-tests</id>
						<phase>verify</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<dataFile>${jacoco.utReportFile}</dataFile>
							<rules>
								<rule implementation="org.jacoco.maven.RuleConfiguration">
									<element>BUNDLE</element>
									<limits>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>INSTRUCTION</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.instruction.ratio}</minimum>
										</limit>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.branch.ratio}</minimum>
										</limit>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.line.ratio}</minimum>
										</limit>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>METHOD</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.method.ratio}</minimum>
										</limit>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>CLASS</counter>
											<value>MISSEDCOUNT</value>
											<maximum>${jacoco.max.missed.classes}</maximum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
					<execution>
						<id>pre-integration-tests</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.itReportFile}</destFile>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for integration tests is created after integration tests have been run -->
					<execution>
						<id>post-integration-tests</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report-integration</goal>
						</goals>
						<configuration>
							<dataFile>${jacoco.itReportFile}</dataFile>
							<outputDirectory>${jacoco.reportFolder}</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>jacoco-check-integration-tests</id>
						<phase>verify</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<dataFile>${jacoco.itReportFile}</dataFile>
							<rules>
								<rule implementation="org.jacoco.maven.RuleConfiguration">
									<element>BUNDLE</element>
									<limits>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>INSTRUCTION</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.instruction.ratio}</minimum>
										</limit>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.branch.ratio}</minimum>
										</limit>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.line.ratio}</minimum>
										</limit>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>METHOD</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.method.ratio}</minimum>
										</limit>
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>CLASS</counter>
											<value>MISSEDCOUNT</value>
											<maximum>${jacoco.max.missed.classes}</maximum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
